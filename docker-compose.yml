version: '3.8'

services:
  # Redis - Primary queue backend
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL - Alternative backend and metrics storage
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: taskforge
      POSTGRES_USER: taskforge
      POSTGRES_PASSWORD: taskforge_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskforge"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployments/docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP agent
    environment:
      COLLECTOR_OTLP_ENABLED: true

  # TaskForge API (when we build it)
  taskforge-api:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.api
    ports:
      - "8080:8080"
      - "9091:9091"  # Metrics port
    environment:
      TASKFORGE_REDIS_URL: redis://redis:6379
      TASKFORGE_POSTGRES_URL: postgres://taskforge:taskforge_dev_password@postgres:5432/taskforge?sslmode=disable
      TASKFORGE_LOG_LEVEL: debug
      TASKFORGE_METRICS_ENABLED: "true"
      TASKFORGE_TRACING_ENABLED: "true"
      TASKFORGE_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./examples:/app/examples
    # Uncomment when we have the binary
    # command: ./taskforge-api

  # TaskForge Workers (when we build them)
  taskforge-worker:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.worker
    environment:
      TASKFORGE_REDIS_URL: redis://redis:6379
      TASKFORGE_POSTGRES_URL: postgres://taskforge:taskforge_dev_password@postgres:5432/taskforge?sslmode=disable
      TASKFORGE_WORKER_CONCURRENCY: "5"
      TASKFORGE_WORKER_QUEUES: "default,webhooks,emails,images,data"
      TASKFORGE_LOG_LEVEL: debug
      TASKFORGE_METRICS_ENABLED: "true"
      TASKFORGE_TRACING_ENABLED: "true"
      TASKFORGE_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    # Uncomment when we have the binary
    # command: ./taskforge-worker
    deploy:
      replicas: 2

  # TaskForge Scheduler (when we build it)
  taskforge-scheduler:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.scheduler
    environment:
      TASKFORGE_REDIS_URL: redis://redis:6379
      TASKFORGE_POSTGRES_URL: postgres://taskforge:taskforge_dev_password@postgres:5432/taskforge?sslmode=disable
      TASKFORGE_SCHEDULER_CHECK_INTERVAL: "10s"
      TASKFORGE_LOG_LEVEL: debug
      TASKFORGE_METRICS_ENABLED: "true"
      TASKFORGE_TRACING_ENABLED: "true"
      TASKFORGE_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    # Uncomment when we have the binary
    # command: ./taskforge-scheduler

  # Development tools
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis

  # For development - runs a simple HTTP server for webhook testing
  webhook-test-server:
    image: node:18-alpine
    ports:
      - "3001:3001"
    working_dir: /app
    volumes:
      - ./examples/webhook-server:/app
    command: |
      sh -c "
        if [ ! -f package.json ]; then
          npm init -y
          npm install express body-parser
        fi
        node server.js
      "

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: taskforge_network