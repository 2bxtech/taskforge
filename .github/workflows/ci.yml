name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scans

jobs:
  test:
    name: Test & Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write  # Required for SARIF uploads
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Verify and prepare dependencies
      run: |
        echo "üîç Verifying dependency integrity..."
        go mod verify
        
        echo "üßπ Ensuring dependencies are clean..."
        go mod tidy
        
        echo "üì¶ Downloading dependencies..."
        go mod download
        
        echo "üìã Dependency summary:"
        go list -m all | head -10
        echo "... ($(go list -m all | wc -l) total dependencies)"

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.55.2
        args: --timeout=5m --issues-exit-code=1

    - name: Install Gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: |
        echo "üîí Running Gosec security scanner..."
        gosec -fmt sarif -out gosec-results.sarif ./... || echo "Gosec completed with findings"
        echo "üìÑ Gosec text output:"
        gosec -fmt text ./... || true
      continue-on-error: true

    - name: Verify Gosec SARIF file exists
      run: |
        if [ -f "gosec-results.sarif" ]; then
          echo "‚úÖ Gosec SARIF file created successfully"
          echo "üìä File size: $(wc -c < gosec-results.sarif) bytes"
        else
          echo "‚ùå Gosec SARIF file not found, creating empty SARIF"
          echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[]}' > gosec-results.sarif
        fi

    - name: Upload Gosec SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec-results.sarif
        category: gosec

    - name: Run govulncheck
      run: |
        echo "üîç Installing and running govulncheck..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... || echo "Vulnerabilities found, check output above"
      continue-on-error: true

    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Run integration tests
      run: make test-integration
      env:
        REDIS_URL: redis://localhost:6379

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: taskforge-coverage
      continue-on-error: true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.sha }}
        path: |
          coverage.out
          coverage.html
          gosec-results.sarif
        retention-days: 30

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:go"

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, codeql]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build binaries
      run: |
        make build
        make build-demo

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ github.sha }}
        path: |
          bin/
        retention-days: 7